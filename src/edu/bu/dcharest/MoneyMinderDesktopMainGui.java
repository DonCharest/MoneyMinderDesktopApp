package edu.bu.dcharest;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import static java.lang.Double.parseDouble;
import static java.lang.Integer.parseInt;
import static java.lang.Math.abs;
import java.text.DateFormat;
import java.text.MessageFormat;
import java.util.Date;
import javax.swing.table.DefaultTableModel;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.data.general.DefaultPieDataset;

/**
 * MoneyMinderDesktopApp Due: 03/23/2019
 *
 * @author Don Charest
 */
public class MoneyMinderDesktopMainGui extends javax.swing.JFrame {

    DialogMessages dm = new DialogMessages();
    NewAccount na = new NewAccount();
    userLogin uL = new userLogin();

    public MoneyMinderDesktopMainGui() {
        initComponents();
        /*  // Allows the user to sort the column data
        remindersTable.setAutoCreateRowSorter(true);  */
        hideColumn();
        getSum();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jRadioButton1 = new javax.swing.JRadioButton();
        TabbedPane = new javax.swing.JTabbedPane();
        tab_Reminders = new javax.swing.JPanel();
        remindersScroll = new javax.swing.JScrollPane();
        remindersTable = new javax.swing.JTable();
        reminderMainPanel = new javax.swing.JPanel();
        Who = new javax.swing.JPanel();
        ToFrom_Lab = new javax.swing.JLabel();
        ToFrom_Txt = new javax.swing.JTextField();
        Amount_Lab = new javax.swing.JLabel();
        Amount_Txt = new javax.swing.JTextField();
        income_Rad = new javax.swing.JRadioButton();
        bill_Rad = new javax.swing.JRadioButton();
        TrackSpending = new javax.swing.JPanel();
        category_comb = new javax.swing.JComboBox<>();
        category_lab = new javax.swing.JLabel();
        CRUD = new javax.swing.JPanel();
        Edit_btn = new javax.swing.JButton();
        create_btn = new javax.swing.JButton();
        delete_btn = new javax.swing.JButton();
        clear_btn = new javax.swing.JButton();
        When = new javax.swing.JPanel();
        endBy_date = new com.toedter.calendar.JDateChooser();
        dueDate_date = new com.toedter.calendar.JDateChooser();
        dueDate_lab = new javax.swing.JLabel();
        frequency_lab = new javax.swing.JLabel();
        endBy_lab = new javax.swing.JLabel();
        frequency_comb = new javax.swing.JComboBox<>();
        Logo = new javax.swing.JScrollPane();
        logo_tBox = new javax.swing.JTextArea();
        LedgerMainPanel = new javax.swing.JPanel();
        ledgerLabel = new javax.swing.JLabel();
        ledgerTxtField = new javax.swing.JTextField();
        tab_TrackSpending = new javax.swing.JPanel();
        chartPanel = new javax.swing.JPanel();
        MainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        menuSave = new javax.swing.JMenuItem();
        menuPrint = new javax.swing.JMenuItem();
        exitButton = new javax.swing.JMenuItem();
        accountMenu = new javax.swing.JMenu();
        loginButton = new javax.swing.JMenuItem();
        logoutButton = new javax.swing.JMenuItem();
        createAccountButton = new javax.swing.JMenuItem();
        menuUI = new javax.swing.JMenu();
        menuClassic = new javax.swing.JMenuItem();
        menuWindows = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuMotif = new javax.swing.JMenuItem();
        menuNimbus = new javax.swing.JMenuItem();

        jRadioButton1.setText("jRadioButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(java.awt.Color.darkGray);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setPreferredSize(null);

        TabbedPane.setBackground(java.awt.Color.darkGray);
        TabbedPane.setForeground(java.awt.Color.lightGray);
        TabbedPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        TabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TabbedPaneMouseClicked(evt);
            }
        });

        remindersScroll.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                remindersScrollMouseMoved(evt);
            }
        });

        remindersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "isIncome", "Due Date", "Pay to / Receive from:", "Amount", "Category", "Frequency", "EndBy", "id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        remindersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                remindersTableMouseClicked(evt);
            }
        });
        remindersScroll.setViewportView(remindersTable);

        reminderMainPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        Who.setBorder(javax.swing.BorderFactory.createTitledBorder("Who:"));

        ToFrom_Lab.setText("To / From:");

        Amount_Lab.setText("Amount:");

        buttonGroup1.add(income_Rad);
        income_Rad.setSelected(true);
        income_Rad.setText("Income");

        buttonGroup1.add(bill_Rad);
        bill_Rad.setText("Bill");

        javax.swing.GroupLayout WhoLayout = new javax.swing.GroupLayout(Who);
        Who.setLayout(WhoLayout);
        WhoLayout.setHorizontalGroup(
            WhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WhoLayout.createSequentialGroup()
                .addGroup(WhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(WhoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(WhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(WhoLayout.createSequentialGroup()
                                .addComponent(Amount_Lab)
                                .addGap(20, 20, 20))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, WhoLayout.createSequentialGroup()
                                .addComponent(ToFrom_Lab)
                                .addGap(18, 18, 18)))
                        .addGroup(WhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Amount_Txt, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ToFrom_Txt, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(WhoLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(income_Rad)
                        .addGap(18, 18, 18)
                        .addComponent(bill_Rad)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        WhoLayout.setVerticalGroup(
            WhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WhoLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(WhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ToFrom_Txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ToFrom_Lab))
                .addGap(18, 18, 18)
                .addGroup(WhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Amount_Txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Amount_Lab))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(WhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(income_Rad)
                    .addComponent(bill_Rad))
                .addGap(20, 20, 20))
        );

        TrackSpending.setBorder(javax.swing.BorderFactory.createTitledBorder("Track Spending:"));

        category_comb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "mortgage", "credit", "loans", "auto", "utilities", "grocery", "medical", "entertainment", "other" }));

        category_lab.setText("Category:");

        javax.swing.GroupLayout TrackSpendingLayout = new javax.swing.GroupLayout(TrackSpending);
        TrackSpending.setLayout(TrackSpendingLayout);
        TrackSpendingLayout.setHorizontalGroup(
            TrackSpendingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TrackSpendingLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(category_lab)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(category_comb, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        TrackSpendingLayout.setVerticalGroup(
            TrackSpendingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TrackSpendingLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(TrackSpendingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(category_comb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(category_lab))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        CRUD.setBorder(javax.swing.BorderFactory.createTitledBorder("Create/Update/Delete Reminder:"));

        Edit_btn.setText("Edit");
        Edit_btn.setMaximumSize(new java.awt.Dimension(68, 32));
        Edit_btn.setMinimumSize(new java.awt.Dimension(68, 32));
        Edit_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Edit_btnActionPerformed(evt);
            }
        });

        create_btn.setText("Create");
        create_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                create_btnActionPerformed(evt);
            }
        });

        delete_btn.setText("Delete");
        delete_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_btnActionPerformed(evt);
            }
        });

        clear_btn.setText("Clear");
        clear_btn.setMaximumSize(new java.awt.Dimension(68, 32));
        clear_btn.setMinimumSize(new java.awt.Dimension(68, 32));
        clear_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clear_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CRUDLayout = new javax.swing.GroupLayout(CRUD);
        CRUD.setLayout(CRUDLayout);
        CRUDLayout.setHorizontalGroup(
            CRUDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CRUDLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(CRUDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(create_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clear_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(CRUDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Edit_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(delete_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(17, 17, 17))
        );
        CRUDLayout.setVerticalGroup(
            CRUDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CRUDLayout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(CRUDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(create_btn)
                    .addComponent(Edit_btn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(CRUDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clear_btn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delete_btn))
                .addGap(17, 17, 17))
        );

        When.setBorder(javax.swing.BorderFactory.createTitledBorder("When:"));

        dueDate_lab.setText("Due date:");

        frequency_lab.setText("How often:");

        endBy_lab.setText("End by:");

        frequency_comb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "one time", "weekly", "bi-weekly", "monthly", "quarterly", "semi-annually", "annually" }));

        javax.swing.GroupLayout WhenLayout = new javax.swing.GroupLayout(When);
        When.setLayout(WhenLayout);
        WhenLayout.setHorizontalGroup(
            WhenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WhenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(WhenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(WhenLayout.createSequentialGroup()
                        .addComponent(frequency_lab)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(frequency_comb, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, WhenLayout.createSequentialGroup()
                        .addComponent(dueDate_lab)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(dueDate_date, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, WhenLayout.createSequentialGroup()
                        .addComponent(endBy_lab)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(endBy_date, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        WhenLayout.setVerticalGroup(
            WhenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WhenLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(WhenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dueDate_lab)
                    .addComponent(dueDate_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(WhenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(frequency_lab)
                    .addComponent(frequency_comb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(WhenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(endBy_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endBy_lab))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        logo_tBox.setEditable(false);
        logo_tBox.setColumns(20);
        logo_tBox.setFont(new java.awt.Font("DialogInput", 0, 24)); // NOI18N
        logo_tBox.setLineWrap(true);
        logo_tBox.setRows(5);
        logo_tBox.setText("\n  Money Minder\n  Desktop\n  Application");
        Logo.setViewportView(logo_tBox);

        javax.swing.GroupLayout reminderMainPanelLayout = new javax.swing.GroupLayout(reminderMainPanel);
        reminderMainPanel.setLayout(reminderMainPanelLayout);
        reminderMainPanelLayout.setHorizontalGroup(
            reminderMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reminderMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reminderMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(Logo, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                    .addComponent(TrackSpending, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(When, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CRUD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Who, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        reminderMainPanelLayout.setVerticalGroup(
            reminderMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reminderMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Who, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(When, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(TrackSpending, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CRUD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Logo, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        ledgerLabel.setText("Projected Balance: ");

        ledgerTxtField.setEditable(false);
        ledgerTxtField.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        ledgerTxtField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        ledgerTxtField.setPreferredSize(new java.awt.Dimension(14, 28));

        javax.swing.GroupLayout LedgerMainPanelLayout = new javax.swing.GroupLayout(LedgerMainPanel);
        LedgerMainPanel.setLayout(LedgerMainPanelLayout);
        LedgerMainPanelLayout.setHorizontalGroup(
            LedgerMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LedgerMainPanelLayout.createSequentialGroup()
                .addContainerGap(730, Short.MAX_VALUE)
                .addComponent(ledgerLabel)
                .addGap(18, 18, 18)
                .addComponent(ledgerTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );
        LedgerMainPanelLayout.setVerticalGroup(
            LedgerMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LedgerMainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(LedgerMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ledgerLabel)
                    .addComponent(ledgerTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout tab_RemindersLayout = new javax.swing.GroupLayout(tab_Reminders);
        tab_Reminders.setLayout(tab_RemindersLayout);
        tab_RemindersLayout.setHorizontalGroup(
            tab_RemindersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab_RemindersLayout.createSequentialGroup()
                .addComponent(reminderMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(tab_RemindersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_RemindersLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(remindersScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 986, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tab_RemindersLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LedgerMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 28, Short.MAX_VALUE))
        );
        tab_RemindersLayout.setVerticalGroup(
            tab_RemindersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab_RemindersLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(tab_RemindersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(reminderMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(tab_RemindersLayout.createSequentialGroup()
                        .addComponent(remindersScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 793, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LedgerMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        TabbedPane.addTab("Reminders", tab_Reminders);

        javax.swing.GroupLayout chartPanelLayout = new javax.swing.GroupLayout(chartPanel);
        chartPanel.setLayout(chartPanelLayout);
        chartPanelLayout.setHorizontalGroup(
            chartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1288, Short.MAX_VALUE)
        );
        chartPanelLayout.setVerticalGroup(
            chartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 845, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout tab_TrackSpendingLayout = new javax.swing.GroupLayout(tab_TrackSpending);
        tab_TrackSpending.setLayout(tab_TrackSpendingLayout);
        tab_TrackSpendingLayout.setHorizontalGroup(
            tab_TrackSpendingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab_TrackSpendingLayout.createSequentialGroup()
                .addComponent(chartPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        tab_TrackSpendingLayout.setVerticalGroup(
            tab_TrackSpendingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab_TrackSpendingLayout.createSequentialGroup()
                .addComponent(chartPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        TabbedPane.addTab("Track Spending", tab_TrackSpending);

        fileMenu.setText("File");

        menuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuSave.setText("Save");
        menuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSaveActionPerformed(evt);
            }
        });
        fileMenu.add(menuSave);

        menuPrint.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        menuPrint.setText("Print");
        menuPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuPrintActionPerformed(evt);
            }
        });
        fileMenu.add(menuPrint);

        exitButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });
        fileMenu.add(exitButton);

        MainMenuBar.add(fileMenu);

        accountMenu.setText("Account");

        loginButton.setText("Log in");
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });
        accountMenu.add(loginButton);

        logoutButton.setText("Log out");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });
        accountMenu.add(logoutButton);

        createAccountButton.setText("Create account");
        createAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createAccountButtonActionPerformed(evt);
            }
        });
        accountMenu.add(createAccountButton);

        MainMenuBar.add(accountMenu);

        menuUI.setText("UI");

        menuClassic.setText("Classic");
        menuClassic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuClassicActionPerformed(evt);
            }
        });
        menuUI.add(menuClassic);

        menuWindows.setText("Windows");
        menuWindows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuWindowsActionPerformed(evt);
            }
        });
        menuUI.add(menuWindows);
        menuUI.add(jSeparator1);

        menuMotif.setText("Motif");
        menuMotif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuMotifActionPerformed(evt);
            }
        });
        menuUI.add(menuMotif);

        menuNimbus.setText("Nimbus");
        menuNimbus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNimbusActionPerformed(evt);
            }
        });
        menuUI.add(menuNimbus);

        MainMenuBar.add(menuUI);

        setJMenuBar(MainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(TabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 1296, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 877, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Method to exit the program
     *
     * @param evt button selected (File > exit)
     */
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        saveDataToFile();
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    /**
     * Method to log out user
     *
     * @param evt button selected (Account > logout)
     */
    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        boolean isLoggedIn = uL.isLoggedIn();
        boolean isLoggedInNew = na.isLoggedIn();
        //boolean found = uL.isFound();
        if (isLoggedIn || isLoggedInNew) {
            na.setIsLoggedIn(false);
            uL.setIsLoggedIn(false);
            uL.setIsFound(false);
            dm.messageUserLoggedOut();
        } else {
            dm.messageUserNotLoggedIn();
        }
    }//GEN-LAST:event_logoutButtonActionPerformed

    /**
     * Method to change the look and feel of the application -> Windows Classic
     *
     * @param evt
     */
    private void menuClassicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuClassicActionPerformed
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsClassicLookAndFeel");
            SwingUtilities.updateComponentTreeUI(this);
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MoneyMinderDesktopMainGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuClassicActionPerformed
    /**
     * Method to change the look and feel of the application -> Motif
     *
     * @param evt
     */
    private void menuNimbusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNimbusActionPerformed
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.motif.MotifLookAndFeel");
            SwingUtilities.updateComponentTreeUI(this);
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MoneyMinderDesktopMainGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuNimbusActionPerformed
    /**
     * Method to change the look and feel of the application -> Nimbus
     *
     * @param evt
     */
    private void menuMotifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuMotifActionPerformed
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.nimbus.NimbusLookAndFeel");
            SwingUtilities.updateComponentTreeUI(this);
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MoneyMinderDesktopMainGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuMotifActionPerformed
    /**
     * Method to change the look and feel of the application -> Windows
     *
     * @param evt
     */
    private void menuWindowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuWindowsActionPerformed
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
            SwingUtilities.updateComponentTreeUI(this);
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MoneyMinderDesktopMainGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuWindowsActionPerformed

    /**
     * Calls save current table data to file method
     *
     * @param evt button selected (File > save)
     */
    private void menuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSaveActionPerformed
        saveDataToFile();
    }//GEN-LAST:event_menuSaveActionPerformed

    /**
     * Method to print out user reminders table data
     *
     * @param evt button selected (File > print)
     */
    private void menuPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuPrintActionPerformed
        MessageFormat header = new MessageFormat(" Reminder List Data ");
        MessageFormat footer = new MessageFormat(" MoneyMinder Inc. '2019' ");
        try {
            remindersTable.print(JTable.PrintMode.FIT_WIDTH, header, footer);
        } catch (PrinterException ex) {
            Logger.getLogger(MoneyMinderDesktopMainGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_menuPrintActionPerformed

    /**
     * Method to set account login panel visible on selection
     *
     * @param evt button selected (Account > login)
     */
    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        uL.setVisible(true);
        boolean isLoggedInNew = uL.isLoggedIn();
        boolean isLoggedIn = na.isLoggedIn();
        if (isLoggedInNew || isLoggedIn) {
            dm.messageMustLogOut();
            uL.dispose();
        }
    }//GEN-LAST:event_loginButtonActionPerformed

    /**
     * Method to set create new account panel visible on selection
     *
     * @param evt button selected (Account > new account)
     */
    private void createAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createAccountButtonActionPerformed
        na.setVisible(true);
        boolean isLoggedInNew = uL.isLoggedIn();
        boolean isLoggedIn = na.isLoggedIn();
        if (isLoggedInNew || isLoggedIn) {
            dm.messageMustLogOut();
            na.dispose();
        }
    }//GEN-LAST:event_createAccountButtonActionPerformed

    /**
     * Method to switch viewable panes and populate 3D-Pie Chart with user
     * generated spending data
     *
     * @param evt tabbed pane clicked (SspendingData)
     */
    private void TabbedPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TabbedPaneMouseClicked
        DefaultPieDataset pieDataset = new DefaultPieDataset();
        // import spending data
        getSpendingData();
        // assign data a title & add to chart
        pieDataset.setValue("mortgage", mort);
        pieDataset.setValue("credit", cred);
        pieDataset.setValue("loans", loan);
        pieDataset.setValue("auto", auto);
        pieDataset.setValue("grocery", groc);
        pieDataset.setValue("medical", medi);
        pieDataset.setValue("utilities", util);
        pieDataset.setValue("entertainment", ente);
        pieDataset.setValue("other", othe);

        JFreeChart chart = ChartFactory.createPieChart3D("How You Spend Your Money",
                pieDataset, true, true, true);
        PiePlot3D P = (PiePlot3D) chart.getPlot();
        // Add chart to existing JPanel...
        chartPanel.setLayout(new java.awt.BorderLayout());
        ChartPanel CP = new ChartPanel(chart);
        chartPanel.add(CP, BorderLayout.CENTER);
        chartPanel.validate();
    }//GEN-LAST:event_TabbedPaneMouseClicked

    private void clear_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clear_btnActionPerformed
        // Method to clear form data
        clearReminderForm();
    }//GEN-LAST:event_clear_btnActionPerformed

    /**
     * Method to delete selected table data
     *
     * @param evt button clicked (reminders tab delete)
     */
    private void delete_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_btnActionPerformed
        // pull current table model
        DefaultTableModel model = (DefaultTableModel) remindersTable.getModel();
        if (remindersTable.getSelectedRow() == -1) {
            if (remindersTable.getRowCount() == 0) {
                dm.messageEmptyTable();
            } else {
                dm.messageSelectLine();
            }
        } else {
            int input = JOptionPane.showConfirmDialog(frame, "Do you want to Delete!");
            // 0 = yes, 1 = no, 2 = cancel
            if (input == 0) {
                model.removeRow(remindersTable.getSelectedRow());
                dm.messageReminderDeleted();// user message;
                saveDataToFile();// Save changes to file
                getSum(); // Update projected balance
            } else {
                // delete canceled
            }
        }
    }//GEN-LAST:event_delete_btnActionPerformed

    /**
     * Method to process reminder form data for entry to the reminders table and
     * subsequently saved to file. The form data is evaluated to ensure that no
     * fields are incomplete, and the amount entered is a valid number. Valid
     * data is pushed into the table model
     *
     * @param evt button clicked (reminders tab create)
     */
    private void create_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_create_btnActionPerformed
        //loadDataFromFile(); ///do not use this call!!!
        boolean isLoggedInNew = na.isLoggedIn();
        boolean isLoggedIn = uL.isLoggedIn();
        if (!isLoggedIn && !isLoggedInNew) {
            JOptionPane.showMessageDialog(null, "Error ", "Please login or create a new account", JOptionPane.ERROR_MESSAGE);
        } else {
            // error test used before form data cleared
            boolean caught = false;
            try {
                // isIncome --> true if radio selected
                boolean isIncome = income_Rad.isSelected();

                // dueDate --> converted from: Date => String value
                Date dateDue = dueDate_date.getDate();
                String dueDate = DateFormat.getDateInstance().format(dateDue);

                // title --> String var
                String title = ToFrom_Txt.getText();

                // amount --> cast to Double; round to 2 places
                double amountRaw = Double.parseDouble(Amount_Txt.getText());
                String rounded = String.format("%.2f", amountRaw);
                double amount = Double.parseDouble(rounded);

                // amount converted to negative value in isIncome is false
                if (!isIncome == true) {
                    amount = (abs(amount) * (-1));
                } else {
                    amount = abs(amount);
                }
                // category --> cast to String value of of box selected
                String category = (String) category_comb.getSelectedItem();

                // freuency --> cast to String value of of box selected
                String frequency = (String) frequency_comb.getSelectedItem();

                // dateEnd --> converted from: Date => String value
                Date dateEnd = endBy_date.getDate();
                String endBy = DateFormat.getDateInstance().format(dateEnd);

                // Transaction id
                int id;
                getLastId();
                if (maxId == 0) {
                    id = 1;
                } else {
                    id = maxId + 1;
                }
                DefaultTableModel model = (DefaultTableModel) remindersTable.getModel();
                if (!title.equals("")) {
                    model.addRow(new Object[]{ // add reminder object to table as row
                        isIncome, dueDate, title, amount, category, frequency, endBy, id
                    });
                } else {
                    dm.messageFieldsIncomplete();
                }
            } catch (NullPointerException e) {
                dm.messageFieldsIncomplete();
                caught = true;
            } catch (NumberFormatException e) {
                dm.messageNumberFormat();
                caught = true;
            }
            // clear form afer Reminder is created sucsessfully
            if (!caught) {
                dm.messageReminderCreated();// user message
                clearReminderForm();// Method to clear form data
                saveDataToFile();// Save changes to file
                getSum(); // Update projected balance
            }
        }
    }//GEN-LAST:event_create_btnActionPerformed

    /**
     * Method to process reminder form data for edit in the reminders table and
     * subsequently saved to file. The form data is evaluated to ensure that no
     * fields are incomplete, and the amount entered is a valid number. Valid
     * data is pushed into the table model
     *
     * @param evt button clicked (reminders tab edit)
     */
    private void Edit_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Edit_btnActionPerformed

        try {

            // pull current table model
            DefaultTableModel model = (DefaultTableModel) remindersTable.getModel();
            if (remindersTable.getSelectedRow() == -1) {
                if (remindersTable.getRowCount() == 0) {
                    dm.messageEmptyTable();
                } else {
                    dm.messageSelectLine();
                }
            } else {
                int input = JOptionPane.showConfirmDialog(frame, "Do you want to Edit!");
                // 0 = yes, 1 = no, 2 = cancel
                if (input == 0) {
                    // isIncome --> true if radio selected
                    boolean isIncome = income_Rad.isSelected();

                    // dueDate --> converted from: Date => String value
                    Date dateDue = dueDate_date.getDate();
                    String dueDate = DateFormat.getDateInstance().format(dateDue);

                    // title --> String var
                    String title = ToFrom_Txt.getText();

                    // amount --> cast to Double; round to 2 places
                    double amountRaw = Double.parseDouble(Amount_Txt.getText());
                    String rounded = String.format("%.2f", amountRaw);
                    double amount = Double.parseDouble(rounded);

                    // amount converted to negative value in isIncome is false
                    if (!isIncome == true) {
                        amount = (abs(amount) * (-1));
                    } else {
                        amount = abs(amount);
                    }

                    // category --> cast to String value of of box selected
                    String category = (String) category_comb.getSelectedItem();

                    // freuency --> cast to String value of of box selected
                    String frequency = (String) frequency_comb.getSelectedItem();

                    // dateEnd --> converted from: Date => String value
                    Date dateEnd = endBy_date.getDate();
                    String endBy = DateFormat.getDateInstance().format(dateEnd);

                    // Update table with form data
                    model.setValueAt(isIncome, remindersTable.getSelectedRow(), 0);
                    model.setValueAt(dueDate, remindersTable.getSelectedRow(), 1);
                    model.setValueAt(title, remindersTable.getSelectedRow(), 2);
                    model.setValueAt(amount, remindersTable.getSelectedRow(), 3);
                    model.setValueAt(category, remindersTable.getSelectedRow(), 4);
                    model.setValueAt(frequency, remindersTable.getSelectedRow(), 5);
                    model.setValueAt(endBy, remindersTable.getSelectedRow(), 6);

                    dm.messageReminderEdited();// user message
                    clearReminderForm();// clear the form
                    saveDataToFile();// Save changes to file
                    getSum(); // Update projected balance

                } else {
                    // edit canceled
                }
            }
        } catch (NullPointerException e) {
            dm.messageFieldsIncomplete();

        } catch (NumberFormatException e) {
            dm.messageNumberFormat();
        }
    }//GEN-LAST:event_Edit_btnActionPerformed

    /**
     * Method to grab selected row of table and populate that data into the
     * reminders form for editing purposes.
     *
     * @param evt button clicked (reminders tab create)
     */
    private void remindersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_remindersTableMouseClicked
        // define date format for String conversion
        DateFormat df = new SimpleDateFormat("MMM dd, yyyy");
        // pull current table model
        DefaultTableModel model = (DefaultTableModel) remindersTable.getModel();

        // get boolean value of radio button group (bill/income) & set matching value in form
        if ((model.getValueAt(remindersTable.getSelectedRow(), 0).equals(true))
                || (model.getValueAt(remindersTable.getSelectedRow(), 0).equals("true"))) {
            income_Rad.setSelected(true);
        } else {
            bill_Rad.setSelected(true);
        }
        try {
            // Update dueDate jDateChooser with populated table data
            dueDate_date.setDate(df.parse((String) model.getValueAt(remindersTable.getSelectedRow(), 1)));
        } catch (ParseException ex) {
            Logger.getLogger(MoneyMinderDesktopMainGui.class.getName()).log(Level.SEVERE, null, ex);
        }
        // Update title jtextField with populated table data
        ToFrom_Txt.setText(model.getValueAt(remindersTable.getSelectedRow(), 2).toString());
        // Update amount jtextField with populated table data
        Amount_Txt.setText(model.getValueAt(remindersTable.getSelectedRow(), 3).toString().replace("-", ""));
        // Update category jComboBox with populated table data
        category_comb.setSelectedItem(model.getValueAt(remindersTable.getSelectedRow(), 4).toString());
        // Update frequency jComboBox with populated table data
        frequency_comb.setSelectedItem(model.getValueAt(remindersTable.getSelectedRow(), 5).toString());
        // Update endBy jDateChooser with populated table data
        try {
            endBy_date.setDate(df.parse((String) model.getValueAt(remindersTable.getSelectedRow(), 6)));
        } catch (ParseException ex) {
            Logger.getLogger(MoneyMinderDesktopMainGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_remindersTableMouseClicked

    /**
     * This action event is used to call the clearTableData() method The call
     * will only be triggered if the user is logged out and if the table
     * contains rows of data
     *
     * @param evt mouse moved over remindersScroll
     */
    private void remindersScrollMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_remindersScrollMouseMoved
        boolean isLoggedInNew = na.isLoggedIn();
        boolean isLoggedIn = uL.isLoggedIn();
        if (isLoggedIn || isLoggedInNew) {
            int count = 0;
            for (int i = 0; i < remindersTable.getRowCount(); i++) {
                count++;
            }
            // user logged in
            if (count == 0) {
                loadDataFromFile(); // update tabe with user data
                getSum(); // update balance field
            } else {
                // don't refresh --> table already populated
            }
        // user logged out    
        } else {
            clearTableData();
            getSum();  // set balance field to zero
        }
    }//GEN-LAST:event_remindersScrollMouseMoved

    /**
     * Method to clear the text fields in the reminder form
     */
    private void clearReminderForm() {
        income_Rad.isSelected();
        dueDate_date.setDate(null);
        ToFrom_Txt.setText("");
        Amount_Txt.setText("");
        category_comb.setSelectedItem("other");
        frequency_comb.setSelectedItem("one time");
        endBy_date.setDate(null);
    }

    /**
     * Method to save reminder information to the user file User file is fetched
     * by parsing username filed and appending to standard file name and path
     * format. There are two branches for file I/O: 1) new accounts 2) existing
     * users
     */
    private void saveDataToFile() {
        boolean isLoggedInNew = na.isLoggedIn();
        boolean isLoggedIn = uL.isLoggedIn();
        // path for new accounts after sucsessful new account creation
        if (isLoggedInNew) {
            String username = na.getUsername();
            String fileExt = "_data.txt";
            String workingDirectory = System.getProperty("user.dir");
            String filePath = workingDirectory + "\\" + username + fileExt;
            File file = new File(filePath);
            try {
                try (FileWriter fw = new FileWriter(file);
                        BufferedWriter bw = new BufferedWriter(fw)) {
                    for (int i = 0; i < remindersTable.getRowCount(); i++) { // rows
                        for (int j = 0; j < remindersTable.getColumnCount(); j++) { // cols
                            bw.write(remindersTable.getValueAt(i, j).toString() + "\t");
                        }
                        bw.newLine();
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(MoneyMinderDesktopMainGui.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        // path for existing accounts after sucsessful login
        if (isLoggedIn) {
            String username = uL.getUsername();
            String fileExt = "_data.txt";
            String workingDirectory = System.getProperty("user.dir");
            String filePath = workingDirectory + "\\" + username + fileExt;
            File file = new File(filePath);
            try {
                try (FileWriter fw = new FileWriter(file);
                        BufferedWriter bw = new BufferedWriter(fw)) {
                    for (int i = 0; i < remindersTable.getRowCount(); i++) { // rows
                        for (int j = 0; j < remindersTable.getColumnCount(); j++) { // cols
                            bw.write(remindersTable.getValueAt(i, j).toString() + "\t");
                        }
                        bw.newLine();
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(MoneyMinderDesktopMainGui.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * Method to load user data into the table; this method is used for both new
     * users and existing users.
     */
    private void loadDataFromFile() {
        boolean isLoggedInNew = na.isLoggedIn();
        boolean isLoggedIn = uL.isLoggedIn();
        // load data for new users after sucsessful new account creation
        if (isLoggedInNew) {
            String username = na.getUsername();
            String fileExt = "_data.txt";
            String workingDirectory = System.getProperty("user.dir");
            String filePath = workingDirectory + "\\" + username + fileExt;
            File file = new File(filePath);
            try {
                FileReader fr = new FileReader(file);
                BufferedReader br = new BufferedReader(fr);
                DefaultTableModel model = (DefaultTableModel) remindersTable.getModel();
                Object[] lines = br.lines().toArray();
                for (int i = 0; i < lines.length; i++) {
                    String[] row = lines[i].toString().split("\t");
                    model.addRow(row);
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MoneyMinderDesktopMainGui.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        // load data for existing users after sucsessful login
        if (isLoggedIn) {
            String username = uL.getUsername();
            String fileExt = "_data.txt";
            String workingDirectory = System.getProperty("user.dir");
            String filePath = workingDirectory + "\\" + username + fileExt;
            File file = new File(filePath);
            try {
                FileReader fr = new FileReader(file);
                BufferedReader br = new BufferedReader(fr);
                DefaultTableModel model = (DefaultTableModel) remindersTable.getModel();
                Object[] lines = br.lines().toArray();
                for (int i = 0; i < lines.length; i++) {
                    String[] row = lines[i].toString().split("\t");
                    model.addRow(row);
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MoneyMinderDesktopMainGui.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * Method to clear the data in the reminders table, when a user logs out.
     * This method is tricked with a mouse scroll over the JPanel. I have
     * noticed that when the table data is large it take several moments to
     * clear
     */
    private void clearTableData() {
        DefaultTableModel model = (DefaultTableModel) remindersTable.getModel();
        model.setRowCount(0);
    }

    /**
     * Method to hide the first row in the visible reminders table This row
     * contains a boolean value (isIncome), which is used to set the amount to
     * (-) or (+) based on the radio button selected on the new reminder form
     */
    private void hideColumn() {
        remindersTable.getColumnModel().getColumn(0).setMinWidth(0);
        remindersTable.getColumnModel().getColumn(0).setMaxWidth(0);
        remindersTable.getColumnModel().getColumn(0).setWidth(0);
    }

    /**
     * Method to calculate a users projected balance from the income and bill
     * reminders scheduled
     */
    private void getSum() {
        double sum = 0;
        for (int i = 0; i < remindersTable.getRowCount(); i++) {
            sum = sum + parseDouble(remindersTable.getValueAt(i, 3).toString());
        }
        String rounded = String.format("%.2f", sum);
        ledgerTxtField.setText(rounded);
    }

    /**
     * Method to auto generate a transaction id I intended to use this field for
     * table sorting. However, since I saved the table data as strings, to be
     * easily saved later to file, the sorting doesn't work well and is not
     * currently utilized.
     */
    private void getLastId() {
        for (int i = 0; i < remindersTable.getRowCount(); i++) {
            if (parseInt(remindersTable.getValueAt(i, 7).toString()) > maxId) {
                maxId = parseInt(remindersTable.getValueAt(i, 7).toString());
            }
        }
    }

    /**
     * Method to process table data for chart generation Data includes only
     * spending, income excluded. The amount data is parsed into double and
     * summed for each of the predefined spending categories.
     */
    private void getSpendingData() {
        mort = 0;
        cred = 0;
        loan = 0;
        auto = 0;
        groc = 0;
        medi = 0;
        util = 0;
        ente = 0;
        othe = 0;
        for (int i = 0; i < remindersTable.getRowCount(); i++) {
            if (remindersTable.getValueAt(i, 0).toString().equals("true")) {
                // do nothing...we want spending only
            } else {
                switch (remindersTable.getValueAt(i, 4).toString()) {
                    case ("mortgage"):
                        mort = mort + parseDouble(remindersTable.getValueAt(i, 3).toString()) * -1;
                        break;
                    case ("credit"):
                        cred = cred + parseDouble(remindersTable.getValueAt(i, 3).toString()) * -1;
                        break;
                    case ("loans"):
                        loan = loan + parseDouble(remindersTable.getValueAt(i, 3).toString()) * -1;
                        break;
                    case ("auto"):
                        auto = auto + parseDouble(remindersTable.getValueAt(i, 3).toString()) * -1;
                        break;
                    case ("utilities"):
                        util = util + parseDouble(remindersTable.getValueAt(i, 3).toString()) * -1;
                        break;
                    case ("grocery"):
                        groc = groc + parseDouble(remindersTable.getValueAt(i, 3).toString()) * -1;
                        break;
                    case ("medical"):
                        medi = medi + parseDouble(remindersTable.getValueAt(i, 3).toString()) * -1;
                        break;
                    case ("entertainment"):
                        ente = ente + parseDouble(remindersTable.getValueAt(i, 3).toString()) * -1;
                        break;
                    case ("other"):
                        othe = othe + parseDouble(remindersTable.getValueAt(i, 3).toString()) * -1;
                        break;
                    default:
                    // no match ... do nothing   
                }
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MoneyMinderDesktopMainGui().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Amount_Lab;
    private javax.swing.JTextField Amount_Txt;
    private javax.swing.JPanel CRUD;
    private javax.swing.JButton Edit_btn;
    private javax.swing.JPanel LedgerMainPanel;
    private javax.swing.JScrollPane Logo;
    private javax.swing.JMenuBar MainMenuBar;
    private javax.swing.JTabbedPane TabbedPane;
    private javax.swing.JLabel ToFrom_Lab;
    private javax.swing.JTextField ToFrom_Txt;
    private javax.swing.JPanel TrackSpending;
    private javax.swing.JPanel When;
    private javax.swing.JPanel Who;
    private javax.swing.JMenu accountMenu;
    private javax.swing.JRadioButton bill_Rad;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> category_comb;
    private javax.swing.JLabel category_lab;
    private javax.swing.JPanel chartPanel;
    private javax.swing.JButton clear_btn;
    private javax.swing.JMenuItem createAccountButton;
    private javax.swing.JButton create_btn;
    private javax.swing.JButton delete_btn;
    private com.toedter.calendar.JDateChooser dueDate_date;
    private javax.swing.JLabel dueDate_lab;
    private com.toedter.calendar.JDateChooser endBy_date;
    private javax.swing.JLabel endBy_lab;
    private javax.swing.JMenuItem exitButton;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JComboBox<String> frequency_comb;
    private javax.swing.JLabel frequency_lab;
    private javax.swing.JRadioButton income_Rad;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel ledgerLabel;
    private javax.swing.JTextField ledgerTxtField;
    private javax.swing.JMenuItem loginButton;
    private javax.swing.JTextArea logo_tBox;
    private javax.swing.JMenuItem logoutButton;
    private javax.swing.JMenuItem menuClassic;
    private javax.swing.JMenuItem menuMotif;
    private javax.swing.JMenuItem menuNimbus;
    private javax.swing.JMenuItem menuPrint;
    private javax.swing.JMenuItem menuSave;
    private javax.swing.JMenu menuUI;
    private javax.swing.JMenuItem menuWindows;
    private javax.swing.JPanel reminderMainPanel;
    private javax.swing.JScrollPane remindersScroll;
    private javax.swing.JTable remindersTable;
    private javax.swing.JPanel tab_Reminders;
    private javax.swing.JPanel tab_TrackSpending;
    // End of variables declaration//GEN-END:variables
    int maxId;
    // var for message dialog 
    Component frame = null;
    // Category data vars
    double mort;
    double cred;
    double loan;
    double auto;
    double groc;
    double medi;
    double util;
    double ente;
    double othe;
}
